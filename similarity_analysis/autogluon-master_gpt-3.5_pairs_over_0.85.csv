node1_path,node1_summary,node2_path,node2_summary,similarity
\autogluon-master\common\src\autogluon\common\loaders\load_pd.py,"Functions `load`, `_load_multipart_child`, `_load_multipart`, and `_load_multipart_s3`: Functions for loading and processing data from various sources with options for customization and multiprocessing capabilities.",\autogluon-master\common\src\autogluon\common\loaders\load_pkl.py,"Functions `load` and `load_with_fn`: Functions for loading data from different sources with optional compression and verbose logging, and loading data from a specified path in various formats.",0.8578
\autogluon-master\common\src\autogluon\common\loaders\_utils.py,"A collection of functions for file manipulation, error handling, downloading, and zip extraction with specific implementations for different operating systems and functionalities.",\autogluon-master\multimodal\tests\unittests\utils\utils.py,"A collection of functions for file manipulation, path handling, directory retrieval, and zip file extraction with specific functionalities.",0.9089
\autogluon-master\common\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems` are implemented to handle slow tests in pytest by adding options, configuring markers, and skipping tests based on command line input.",\autogluon-master\core\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems`: Implement custom configurations for pytest to handle slow, skipped, and platform-specific tests efficiently.",0.9031
\autogluon-master\common\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems` are implemented to handle slow tests in pytest by adding options, configuring markers, and skipping tests based on command line input.",\autogluon-master\eda\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems` enhance pytest functionality by adding command-line options for slow tests, configuring markers, and modifying test item collections.",0.9140
\autogluon-master\common\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems` are implemented to handle slow tests in pytest by adding options, configuring markers, and skipping tests based on command line input.",\autogluon-master\features\tests\conftest.py,"Functions pytest_addoption, pytest_configure, and pytest_collection_modifyitems: Implementations for adding and managing slow test options in pytest.",0.9274
\autogluon-master\common\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems` are implemented to handle slow tests in pytest by adding options, configuring markers, and skipping tests based on command line input.",\autogluon-master\multimodal\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems` in pytest provide options for running specific types of tests, configure markers for labeling tests, and modify test collection items based on command line options.",0.8713
\autogluon-master\common\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and issues a warning for any violations detected.,\autogluon-master\core\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and alerts about excessive violations.,0.9477
\autogluon-master\common\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and issues a warning for any violations detected.,\autogluon-master\eda\tests\test_check_style.py,Function `test_check_style`: A function that evaluates the PEP8 style of the code and alerts about excessive violations.,0.9439
\autogluon-master\common\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and issues a warning for any violations detected.,\autogluon-master\features\tests\test_check_style.py,Function `test_check_style`: A function that detects PEP8 style violations in the code and raises a warning if a significant number are present.,0.9542
\autogluon-master\common\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and issues a warning for any violations detected.,\autogluon-master\multimodal\tests\test_check_style.py,Function `test_check_style`: A function that checks the PEP8 style of the code and raises warnings for excessive violations.,0.9437
\autogluon-master\common\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and issues a warning for any violations detected.,\autogluon-master\tabular\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and issues a warning for any violations detected.,1.0000
\autogluon-master\common\tests\unittests\test_import_version.py,Function `test_import_version`: Validates that the autogluon common version is not an empty string.,\autogluon-master\core\tests\unittests\test_import_version.py,Function `test_import_version`: Tests the version of the autogluon.core module for being a non-empty string.,0.9107
\autogluon-master\core\src\autogluon\core\metrics\quantile_metrics.py,Function `pinball_loss`: Calculates the pinball loss with customizable sample and quantile weights for target values and quantile predictions.,\autogluon-master\core\tests\unittests\metrics\test_quantile_metrics.py,"Functions testing various scenarios for the pinball_loss function, including invalid quantile values shape, mismatched target/prediction lengths, mismatched quantiles, single prediction, multiple predictions, and multiple predictions with weights.",0.8825
\autogluon-master\core\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems`: Implement custom configurations for pytest to handle slow, skipped, and platform-specific tests efficiently.",\autogluon-master\eda\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems` enhance pytest functionality by adding command-line options for slow tests, configuring markers, and modifying test item collections.",0.9110
\autogluon-master\core\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems`: Implement custom configurations for pytest to handle slow, skipped, and platform-specific tests efficiently.",\autogluon-master\features\tests\conftest.py,"Functions pytest_addoption, pytest_configure, and pytest_collection_modifyitems: Implementations for adding and managing slow test options in pytest.",0.9175
\autogluon-master\core\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems`: Implement custom configurations for pytest to handle slow, skipped, and platform-specific tests efficiently.",\autogluon-master\multimodal\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems` in pytest provide options for running specific types of tests, configure markers for labeling tests, and modify test collection items based on command line options.",0.9051
\autogluon-master\core\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and alerts about excessive violations.,\autogluon-master\eda\tests\test_check_style.py,Function `test_check_style`: A function that evaluates the PEP8 style of the code and alerts about excessive violations.,0.9163
\autogluon-master\core\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and alerts about excessive violations.,\autogluon-master\features\tests\test_check_style.py,Function `test_check_style`: A function that detects PEP8 style violations in the code and raises a warning if a significant number are present.,0.8916
\autogluon-master\core\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and alerts about excessive violations.,\autogluon-master\multimodal\tests\test_check_style.py,Function `test_check_style`: A function that checks the PEP8 style of the code and raises warnings for excessive violations.,0.9021
\autogluon-master\core\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and alerts about excessive violations.,\autogluon-master\tabular\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and issues a warning for any violations detected.,0.9477
\autogluon-master\core\tests\unittests\metrics\test_metrics.py,"A series of test functions that validate different aspects of metric scoring for classification, regression, and edge cases.",\autogluon-master\multimodal\tests\unittests\others\test_metrics.py,A series of test functions and calculations for evaluating various metrics and custom metrics in a machine learning context.,0.8540
\autogluon-master\core\tests\unittests\utils\decorators\test_presets.py,"Class `TestPresets`: A unit test class for testing the functionality of applying presets to function arguments, with test cases and a method to retrieve the presets.",\autogluon-master\tabular\tests\unittests\configs\test_presets.py,"Class TestPresets: A unit test case for verifying the application of presets and aliases in a test scenario, along with functions to test presets and retrieve keyword arguments.",0.8585
\autogluon-master\eda\src\autogluon\eda\analysis\missing.py,Class `MissingValuesAnalysis`: Provides analysis on missing values in datasets and stores statistics in the `missing_statistics` attribute.,\autogluon-master\eda\src\autogluon\eda\visualization\missing.py,Class `MissingValues`: A class that generates visualizations of missing values for datasets using different methods specified in the `graph_type` parameter and handles analysis states based on specific conditions.,0.8839
\autogluon-master\eda\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems` enhance pytest functionality by adding command-line options for slow tests, configuring markers, and modifying test item collections.",\autogluon-master\features\tests\conftest.py,"Functions pytest_addoption, pytest_configure, and pytest_collection_modifyitems: Implementations for adding and managing slow test options in pytest.",0.8873
\autogluon-master\eda\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems` enhance pytest functionality by adding command-line options for slow tests, configuring markers, and modifying test item collections.",\autogluon-master\multimodal\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems` in pytest provide options for running specific types of tests, configure markers for labeling tests, and modify test collection items based on command line options.",0.9369
\autogluon-master\eda\tests\test_check_style.py,Function `test_check_style`: A function that evaluates the PEP8 style of the code and alerts about excessive violations.,\autogluon-master\features\tests\test_check_style.py,Function `test_check_style`: A function that detects PEP8 style violations in the code and raises a warning if a significant number are present.,0.9761
\autogluon-master\eda\tests\test_check_style.py,Function `test_check_style`: A function that evaluates the PEP8 style of the code and alerts about excessive violations.,\autogluon-master\multimodal\tests\test_check_style.py,Function `test_check_style`: A function that checks the PEP8 style of the code and raises warnings for excessive violations.,0.9882
\autogluon-master\eda\tests\test_check_style.py,Function `test_check_style`: A function that evaluates the PEP8 style of the code and alerts about excessive violations.,\autogluon-master\tabular\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and issues a warning for any violations detected.,0.9439
\autogluon-master\examples\automm\kaggle_feedback_prize\kaggle_feedback_prize_submit.py,"The content provides a class ExportedBoundingBox that serves as a proxy model of BoundingBox, offering methods to convert bounding box annotations into dictionary and tuple formats.",\autogluon-master\examples\automm\kaggle_pawpularity\kaggle_pawpularity_submit.py,The class ExportedBoundingBox is a proxy model that represents bounding box annotations in dictionary and tuple forms.,0.9579
\autogluon-master\features\src\autogluon\features\generators\category.py,"Class `CategoryFeatureGenerator`: A feature generator that handles categorical data, optimizes memory usage, and provides methods for fitting, transforming, and generating features based on categories.",\autogluon-master\features\src\autogluon\features\generators\memory_minimize.py,Class `CategoryMemoryMinimizeFeatureGenerator`: A feature generator that optimizes memory usage of categorical features by converting categories to integer values and mapping them to new memory-efficient categories.,0.8560
\autogluon-master\features\tests\conftest.py,"Functions pytest_addoption, pytest_configure, and pytest_collection_modifyitems: Implementations for adding and managing slow test options in pytest.",\autogluon-master\multimodal\tests\conftest.py,"Functions `pytest_addoption`, `pytest_configure`, and `pytest_collection_modifyitems` in pytest provide options for running specific types of tests, configure markers for labeling tests, and modify test collection items based on command line options.",0.8622
\autogluon-master\features\tests\test_check_style.py,Function `test_check_style`: A function that detects PEP8 style violations in the code and raises a warning if a significant number are present.,\autogluon-master\multimodal\tests\test_check_style.py,Function `test_check_style`: A function that checks the PEP8 style of the code and raises warnings for excessive violations.,0.9821
\autogluon-master\features\tests\test_check_style.py,Function `test_check_style`: A function that detects PEP8 style violations in the code and raises a warning if a significant number are present.,\autogluon-master\tabular\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and issues a warning for any violations detected.,0.9542
\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_l_8xb8-300e_coco.py,"Model configuration settings for a YOLOX object detection model with specified backbone, neck, and bounding box head parameters.",\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_m_8xb8-300e_coco.py,"Configuration settings for a YOLOX object detection model with customized backbone, neck, and bounding box head specifications.",0.9836
\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_l_8xb8-300e_coco.py,"Model configuration settings for a YOLOX object detection model with specified backbone, neck, and bounding box head parameters.",\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_nano_8xb8-300e_coco.py,"Configuration settings for a YOLOX object detection model with specific parameters for backbone, neck, and bounding box head components.",0.9799
\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_l_8xb8-300e_coco.py,"Model configuration settings for a YOLOX object detection model with specified backbone, neck, and bounding box head parameters.",\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_tiny_8xb8-300e_coco.py,"Configuration settings for a YOLOX object detection model with specific data preprocessing, backbone, neck, and bounding box head configurations and test pipeline for image processing.",0.9437
\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_l_8xb8-300e_coco.py,"Model configuration settings for a YOLOX object detection model with specified backbone, neck, and bounding box head parameters.",\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_x_8xb8-300e_coco.py,"Content: Configuration settings for a YOLOX object detection model with specified backbone, neck, and bounding box head parameters.",0.9811
\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_m_8xb8-300e_coco.py,"Configuration settings for a YOLOX object detection model with customized backbone, neck, and bounding box head specifications.",\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_nano_8xb8-300e_coco.py,"Configuration settings for a YOLOX object detection model with specific parameters for backbone, neck, and bounding box head components.",0.9761
\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_m_8xb8-300e_coco.py,"Configuration settings for a YOLOX object detection model with customized backbone, neck, and bounding box head specifications.",\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_tiny_8xb8-300e_coco.py,"Configuration settings for a YOLOX object detection model with specific data preprocessing, backbone, neck, and bounding box head configurations and test pipeline for image processing.",0.9446
\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_m_8xb8-300e_coco.py,"Configuration settings for a YOLOX object detection model with customized backbone, neck, and bounding box head specifications.",\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_x_8xb8-300e_coco.py,"Content: Configuration settings for a YOLOX object detection model with specified backbone, neck, and bounding box head parameters.",0.9727
\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_nano_8xb8-300e_coco.py,"Configuration settings for a YOLOX object detection model with specific parameters for backbone, neck, and bounding box head components.",\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_tiny_8xb8-300e_coco.py,"Configuration settings for a YOLOX object detection model with specific data preprocessing, backbone, neck, and bounding box head configurations and test pipeline for image processing.",0.9297
\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_nano_8xb8-300e_coco.py,"Configuration settings for a YOLOX object detection model with specific parameters for backbone, neck, and bounding box head components.",\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_x_8xb8-300e_coco.py,"Content: Configuration settings for a YOLOX object detection model with specified backbone, neck, and bounding box head parameters.",0.9744
\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_tiny_8xb8-300e_coco.py,"Configuration settings for a YOLOX object detection model with specific data preprocessing, backbone, neck, and bounding box head configurations and test pipeline for image processing.",\autogluon-master\multimodal\src\autogluon\multimodal\configs\pretrain\detection\yolox\yolox_x_8xb8-300e_coco.py,"Content: Configuration settings for a YOLOX object detection model with specified backbone, neck, and bounding box head parameters.",0.9314
\autogluon-master\multimodal\src\autogluon\multimodal\learners\base.py,"A comprehensive set of functions for initializing, configuring, training, and evaluating machine learning models, including methods for data processing, model fitting, prediction, and model saving/loading.",\autogluon-master\multimodal\src\autogluon\multimodal\predictor.py,"A comprehensive set of functions for initializing, training, evaluating, and deploying machine learning models, including options for hyperparameter tuning, model saving/loading, inference optimization, and ONNX export.",0.8828
\autogluon-master\multimodal\tests\test_check_style.py,Function `test_check_style`: A function that checks the PEP8 style of the code and raises warnings for excessive violations.,\autogluon-master\tabular\tests\test_check_style.py,Function `test_check_style`: A function that verifies PEP8 style adherence and issues a warning for any violations detected.,0.9437
\autogluon-master\tabular\src\autogluon\tabular\models\rf\compilers\native.py,"Class `AbstractNativeCompiler`: A static class for compiling, saving, loading native models in pickle format for faster inference.",\autogluon-master\tabular\src\autogluon\tabular\models\tabular_nn\compilers\native.py,"Class AbstractNativeCompiler: A static class with methods for compiling, saving, and loading native models for optimized inference, along with a function to check if compilation is possible.",0.8726
\autogluon-master\tabular\tests\unittests\models\test_tabular_nn.py,"A series of test functions for fitting, validating, and compiling Tabular Neural Network models with various datasets and settings.",\autogluon-master\tabular\tests\unittests\models\test_tabular_nn_fastai.py,A series of test functions for evaluating tabular neural network models using the FastAI library on various datasets and functionalities.,0.8906
\autogluon-master\tabular\tests\unittests\resource_allocation\test_resource_allocation_combined.py,"Class `DummyBaseModel`: An abstract model providing methods to access minimum and default resources, with subclasses `DummyModel` and `DummyBaggedModel` lacking additional functionality, along with functions for resource initialization, data preparation, fold strategy construction, and model testing.",\autogluon-master\tabular\tests\unittests\resource_allocation\test_total_resource_allocation.py,"Class DummyBaseModel: A model with methods for accessing minimum and default resources, with subclasses DummyModel and DummyBaggedModel inheriting its functionalities, and various test functions to validate resource allocation scenarios.",0.8511
